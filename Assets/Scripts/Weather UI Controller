using UnityEngine;
using UnityEngine.UI;
using TMPro;
using WeatherApp.Services;
using WeatherApp.Data;
using System.Threading.Tasks;

namespace WeatherApp.UI
{
    /// <summary>
    /// UI Controller for the Weather Application
    /// Connects UI with the Weather API client
    /// </summary>
    public class WeatherUIController : MonoBehaviour
    {
        [Header("UI References")]
        [SerializeField] private TMP_InputField cityInputField;
        [SerializeField] private Button getWeatherButton;
        [SerializeField] private TextMeshProUGUI weatherDisplayText;
        [SerializeField] private TextMeshProUGUI statusText;
        
        [Header("API Client")]
        [SerializeField] private WeatherApiClient apiClient;
        
        private void Start()
        {
            // Set up button click listener
            getWeatherButton.onClick.AddListener(OnGetWeatherClicked);

            // Initialize UI state
            SetStatusText("Enter a city name and click Get Weather");
        }
        
        private async void OnGetWeatherClicked()
        {
            string cityName = cityInputField.text;
            
            // Validate input
            if (string.IsNullOrWhiteSpace(cityName))
            {
                SetStatusText("Please enter a city name");
                return;
            }
            
            // Disable button and show loading state
            getWeatherButton.interactable = false;
            SetStatusText($"Loading weather data for {cityName}...");
            weatherDisplayText.text = "";
            
            try
            {
                // ✅ Call API client to get weather data
                WeatherData weatherData = await apiClient.GetWeatherAsync(cityName);
                
                if (weatherData != null && weatherData.Main != null)
                {
                    DisplayWeatherData(weatherData);
                    SetStatusText("Weather data loaded successfully!");
                }
                else
                {
                    SetStatusText("No data found. Please try another city.");
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"Error getting weather data: {ex.Message}");
                SetStatusText("An error occurred. Please try again.");
            }
            finally
            {
                // Re-enable button
                getWeatherButton.interactable = true;
            }
        }
        
        private void DisplayWeatherData(WeatherData weatherData)
        {
            string city = weatherData.Name ?? "Unknown City";
            string description = weatherData.Weather != null && weatherData.Weather.Length > 0
                ? weatherData.Weather[0].Description
                : "No description available";

            string displayText =
                $"City: {city}\n" +
                $"Temperature: {weatherData.Main.Temp:F1}°C (Feels like: {weatherData.Main.Feels_Like:F1}°C)\n" +
                $"Description: {description}\n" +
                $"Humidity: {weatherData.Main.Humidity}%\n" +
                $"Pressure: {weatherData.Main.Pressure} hPa";

            weatherDisplayText.text = displayText;
        }
        
        private void SetStatusText(string message)
        {
            if (statusText != null)
            {
                statusText.text = message;
            }
        }
        
        public void ClearDisplay()
        {
            weatherDisplayText.text = "";
            cityInputField.text = "";
            SetStatusText("Enter a city name and click Get Weather");
        }
    }
}
